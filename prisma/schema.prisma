// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([userId])
    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts        Account[]
    sessions        Session[]
    teacherProfiles TeacherProfile[]
}

model TeacherProfile {
    id            String    @id @default(cuid())
    username      String
    userId        String
    notifications           TeacherNotification[]
    worksheets              Worksheet[]
    publishedWorksheets     PublishedWorksheet[]
    user                    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([userId])
}

model TeacherNotification {
    id            String    @id @default(cuid())
    text          String?
    time          DateTime?  @default(now())
    isRead        Boolean  @default(false)
    resource      String   
    profileId     String
    profile       TeacherProfile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([profileId])
}

//  Worksheet, Published Worksheet and Answer Sheet
//
//  Worksheet - The actual worksheet that the teacher will edit on
//  Published Worksheet - Uneditable worksheet that is published from the worksheet.
//                        New published worksheet is created each time teacher creates a new version
//  Answer Sheet - The table that stores the user's answer to its corresponding questions

model Worksheet {
    id             String    @id @default(cuid())
    title          String
    lastEdited     DateTime      @updatedAt
    questions                    Question[]
    publishedWorksheets          PublishedWorksheet[]
    profileId      String
    profile        TeacherProfile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   
    @@index([profileId])
	
}

model PublishedWorksheet {
    id             String    @id @default(cuid())
    title          String
    status         WorksheetStatus      @default(PRIVATE)
    version        Int          
    createdTime    DateTime     @default(now())
    totalMarks     Int 
    questions                    Question[]
    answerSheets                 AnswerSheet[]
    worksheetId      String
    worksheet        Worksheet @relation(fields: [worksheetId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    profileId        String
    profile          TeacherProfile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([worksheetId])
    @@index([profileId])
}

enum WorksheetStatus {
    PUBLIC
    PRIVATE
}

model AnswerSheet {
    id                  String    @id @default(cuid())
    studentName         String
    studentEmail        String
    studentPassword     String? 
    startTime           DateTime     @default(now())
    endTime             DateTime?
    totalMarks          Int?  
    answers             Answer[]   
    publishedWorksheetId         String @map("worksheetId")
    publishedWorksheet           PublishedWorksheet @relation(fields: [publishedWorksheetId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([publishedWorksheetId])
}


// ***      Questions     ***

model Question {
    id                  String    @id @default(cuid())
    order               Int   
    questionType        QuestionType
    parentQuestions              ParentQuestion?
    multipleChoiceQuestion       MultipleChoiceQuestion?
    shortAnswerQuestion          ShortAnswerQuestion?
    longAnswerQuestion          LongAnswerQuestion? 
    worksheetId         String?
    worksheet           Worksheet? @relation(fields: [worksheetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    publishedWorksheetId         String?
    publishedWorksheet           PublishedWorksheet? @relation(fields: [publishedWorksheetId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([worksheetId])
    @@index([publishedWorksheetId])
}

enum QuestionType {
    ParentQuestion
    MultipleChoiceQuestion
    ShortAnswerQuestion
    LongAnswerQuestion
}



//  Different types of questions
//  - Parent Question
//  - Multiple Choice Question
//  - Short Answer Question
//  - Long Answer Question
// 
//  Parent Question - A question that encompasses other question types as children. Also can be self-referential.
//  Multiple Choice Question - A question where student has to choose from one option. 
//  Short Answer Question - A question that student has to type in. Can be checked automatically based on answer
//  Long Answer Question - A question that student has to type in. Cannot be checked automatically. Only contains sample answer

model ParentQuestion {
    id                  String    @id @default(cuid())
    text                String?
    images              String?
    multipleChoiceQuestion       MultipleChoiceQuestion[]
    shortAnswerQuestion          ShortAnswerQuestion[]
    longAnswerQuestions          LongAnswerQuestion[] 
    
    // Self-Referential relation of parent and children
    parentQuestionId    String?
    parentQuestion      ParentQuestion? @relation("ParentQuestion", fields: [parentQuestionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    childrenQuestions   ParentQuestion[] @relation("ParentQuestion")
    // Many-to-one relationship to question
    questionId         String   @unique
    question           Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    

    @@index([parentQuestionId])
    @@index([questionId])
}

model MultipleChoiceQuestion {
    id                  String    @id @default(cuid())
    text                String?
    images              String? 
    answer              Int?
    explanation         String?
    marks               Int    
    choices             MultipleChoiceQuestionOption[]
    parentQuestionId    String?
    parentQuestion      ParentQuestion?  @relation(fields: [parentQuestionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    questionId         String   @unique
    question           Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([parentQuestionId])
    @@index([questionId])
}

model MultipleChoiceQuestionOption {
    id                  String    @id @default(cuid())
    index               Int
    text                String? 
    multipleChoiceQuestionChoiceId         String
    multipleChoiceQuestionChoice           MultipleChoiceQuestion @relation(fields: [multipleChoiceQuestionChoiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([multipleChoiceQuestionChoiceId])
}

model ShortAnswerQuestion {
    id                  String    @id @default(cuid())
    text                String?
    images              String? 
    answer              String?
    explanation         String?
    marks               Int    
    parentQuestionId    String?
    parentQuestion      ParentQuestion?  @relation(fields: [parentQuestionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    questionId         String   @unique
    question           Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([parentQuestionId])
    @@index([questionId])
}

model LongAnswerQuestion {
    id                  String    @id @default(cuid())
    text                String?
    images              String? 
    sampleAnswer        String?
    explanation         String?
    marks               Int    
    parentQuestionId    String?
    parentQuestion      ParentQuestion?  @relation(fields: [parentQuestionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    questionId         String   @unique
    question           Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([parentQuestionId])
    @@index([questionId])
}


// ***      Answers     ***

model Answer {
    id                              String    @id @default(cuid())
    order                           Int   
    answerType                      AnswerType
    multipleChoiceQuestionAnswer    MultipleChoiceQuestionAnswer?
    shortAnswerQuestionAnswer       ShortAnswerQuestionAnswer?
    longAnswerQuestionAnswer        LongAnswerQuestionAnswer?
    answerSheetId                   String
    answerSheet                     AnswerSheet @relation(fields: [answerSheetId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([answerSheetId])
}

enum AnswerType {
    MultipleChoiceQuestionAnswer
    ShortAnswerQuestionAnswer
    LongAnswerQuestionAnswer
}

model MultipleChoiceQuestionAnswer {
    id                    String    @id @default(cuid())
    studentAnswer         Int   
    feedback              String
    answerId              String    @unique
    answer                Answer    @relation(fields: [answerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([answerId])
}

model ShortAnswerQuestionAnswer {
    id                    String    @id @default(cuid())
    studentAnswer         String   
    feedback              String
    answerId              String    @unique
    answer                Answer    @relation(fields: [answerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([answerId])
}

model LongAnswerQuestionAnswer {
    id                    String    @id @default(cuid())
    studentAnswer         String   
    studentImages         String
    feedback              String
    answerId              String    @unique 
    answer                Answer    @relation(fields: [answerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([answerId])
}