// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([userId])
    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    teacherProfiles TeacherProfile[]
}

model TeacherProfile {
    id            String    @id @default(cuid())
    username      String
    userId        String
    notifications           TeacherNotification[]
    worksheets              Worksheet[]
    publishedWorksheets     PublishedWorksheet[]
    user          User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([userId])
}

model TeacherNotification {
    id            String    @id @default(cuid())
    text          String?
    time          DateTime?  @default(now())
    isRead        Boolean  @default(false)
    resource      String   
    profileId     String
    profile       TeacherProfile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([profileId])
}


model Worksheet {
    id             String    @id @default(cuid())
    title          String
    lastEdited     DateTime     @updatedAt
    worksheets     PublishedWorksheet[]
    profileId      String
    profile        TeacherProfile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([profileId])
	
}

model PublishedWorksheet {
    id             String    @id @default(cuid())
    title          String
    status         WorksheetStatus      @default(PRIVATE)
    createdTime    DateTime     @default(now())
    totalMarks     Int 
    answerSheets   AnswerSheet[]
    worksheetId      String
    worksheet        Worksheet @relation(fields: [worksheetId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    profileId      String
    profile        TeacherProfile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([worksheetId])
    @@index([profileId])
	
}

enum WorksheetStatus {
    PUBLIC
    PRIVATE
}

model AnswerSheet {
    id                  String    @id @default(cuid())
    studentEmail        String
    studentPassword     String? 
    startTime           DateTime     @default(now())
    endTime             DateTime?
    totalMarks          Int?     
    worksheetId         String
    worksheet           PublishedWorksheet @relation(fields: [worksheetId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([worksheetId])
}


