// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#mysql
// https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

// TinyText - 255 Characters (~50 words)
// Text - 65,535 characters (~13 000 words)
// Medium Text - 16,777,215 characters (~16,500,000 words)
// Long Text -4,294,967,295 characters (~850,000,000 words)

// https://clerk.com/docs/users/sync-data-to-your-backend
model TeacherProfile {
    id            String    @id @default(cuid())
    email         String    @default("")
    userId        String
    notifications           TeacherNotification[]
    worksheets              Worksheet[]
    publishedWorksheets     PublishedWorksheet[]

    @@index([userId])
    @@index([email])
}

model TeacherNotification {
    id            String            @id @default(cuid())
    text          String?
    time          DateTime?         @default(now())
    isRead        Boolean           @default(false)
    resource      String   
    profileId     String
    profile       TeacherProfile    @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([profileId])
}

//  Utils Table
//  Image
model Image {
    id              String          @id @default(cuid())
    fileKey         String          @db.Text
    url             String          @db.VarChar(1024)
    caption         String          @db.VarChar(1024)    
    nestedQuestionId                String?  
    nestedQuestion                  NestedQuestion? @relation(fields: [nestedQuestionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    multipleChoiceQuestionId        String? 
    multipleChoiceQuestion          MultipleChoiceQuestion? @relation(fields: [multipleChoiceQuestionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    shortAnswerQuestionId           String? 
    shortAnswerQuestion             ShortAnswerQuestion?    @relation(fields: [shortAnswerQuestionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    openEndedQuestionId             String? 
    openEndedQuestion               OpenEndedQuestion?     @relation(fields: [openEndedQuestionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    essayId                         String? 
    essayQuestion                   EssayQuestion?     @relation(fields: [essayId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   
    @@index([nestedQuestionId])
    @@index([multipleChoiceQuestionId])
    @@index([shortAnswerQuestionId])
    @@index([openEndedQuestionId])
    @@index([essayId])
}

//  Worksheet, Published Worksheet and Answer Sheet
//
//  Worksheet - The actual worksheet that the teacher will edit on
//  Published Worksheet - Uneditable worksheet that is published from the worksheet.
//                        New published worksheet is created each time teacher creates a new version
//  Answer Sheet - The table that stores the user's answer to its corresponding questions

model Worksheet {
    id             String           @id @default(cuid())
    title          String           @db.TinyText    
    country        String?          @db.TinyText    
    curriculum     String?          @db.TinyText    
    subject        String?          @db.TinyText    
    lastEdited     DateTime         @updatedAt
    questions                       Question[]
    publishedWorksheets             PublishedWorksheet[]
    profileId      String
    profile        TeacherProfile   @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   
    @@index([profileId])
}

model PublishedWorksheet {
    id             String               @id @default(cuid())
    title          String               @db.TinyText
    country        String?              @db.TinyText    
    curriculum     String?              @db.TinyText   
    subject        String?              @db.TinyText    
    status         WorksheetStatus      @default(PRIVATE)
    version        Int          
    createdTime    DateTime             @default(now())
    totalMarks     Int 
    questions                    Question[]
    answerSheets                 AnswerSheet[]
    worksheetId      String?
    worksheet        Worksheet?          @relation(fields: [worksheetId], references: [id], onDelete: SetNull, onUpdate: SetNull)
    profileId        String?
    profile          TeacherProfile?     @relation(fields: [profileId], references: [id], onDelete: SetNull, onUpdate: SetNull)

    @@index([worksheetId])
    @@index([profileId])
}

enum WorksheetStatus {
    PUBLIC
    PRIVATE
}

model AnswerSheet {
    id                  String          @id @default(cuid())
    studentName         String          @db.TinyText
    studentEmail        String          @db.VarChar(255)
    studentPassword     String?         //This should be stored in hash.
    status              AnswerSheetStatus 
    startTime           DateTime        @default(now())
    endTime             DateTime?
    totalMarks          Int?  
    answers             Answer[]   
    publishedWorksheetId         String @map("worksheetId")
    publishedWorksheet           PublishedWorksheet @relation(fields: [publishedWorksheetId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([publishedWorksheetId])

    // Index the email of the student to query efficiently in the future
    @@index([studentEmail])
}

enum AnswerSheetStatus {
    answering
    checking
    returned
}

// ***      Questions     ***

model Question {
    id                          String    @id @default(cuid())
    order                       Int   
    questionType                    QuestionType
    nestedQuestion                  NestedQuestion?     @relation(name: "NestedQuestion")
    multipleChoiceQuestion          MultipleChoiceQuestion?
    shortAnswerQuestion             ShortAnswerQuestion?
    openEndedQuestion               OpenEndedQuestion? 
    essayQuestion                   EssayQuestion? 
    worksheetId                 String?
    worksheet                   Worksheet?              @relation(fields: [worksheetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    publishedWorksheetId        String?
    publishedWorksheet          PublishedWorksheet?     @relation(fields: [publishedWorksheetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    parentId                    String?
    parent                      NestedQuestion?         @relation(name: "ParentQuestion", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)


    @@index([worksheetId])
    @@index([publishedWorksheetId])
    @@index([parentId])
}

enum QuestionType {
    NestedQuestion
    MultipleChoiceQuestion
    ShortAnswerQuestion
    OpenEndedQuestion
    EssayQuestion
}



//  Different types of questions
//  - Nested Question
//  - Multiple Choice Question
//  - Short Answer Question
//  - Open Ended Question
//  
//  Nested Question - A question that encompasses other question types as children. Also can be self-referential.
//  Multiple Choice Question - A question where student has to choose from one option. 
//  Short Answer Question - A question that student has to type in. Can be checked automatically based on answer
//  Open Ended Question - A question that student has to type in. Cannot be checked automatically. Only contains sample answer

model NestedQuestion {
    id                  String      @id @default(cuid())
    text                String      @db.Text
    images              Image[]
    
    // One-to-one relationship to question
    questionId          String?          @unique
    question            Question?        @relation(name: "NestedQuestion", fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    // Self-Referential relation of parent and children
    // parentQuestionId    String?
    // parentQuestion      ParentQuestion?  @relation(fields: [parentQuestionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    childrenQuestions   Question[]       @relation(name: "ParentQuestion")
    

    // @@index([parentQuestionId])
    @@index([questionId])
}

model MultipleChoiceQuestion {
    id                  String      @id @default(cuid())
    text                String      @db.Text
    images              Image[]     
    answer              Int
    explanation         String      @db.Text
    marks               Int    
    choices             MultipleChoiceQuestionOption[]
    questionId          String?      @unique
    question            Question?    @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([questionId])
}

model MultipleChoiceQuestionOption {
    id                  String          @id @default(cuid())
    index               Int
    text                String          @db.Text
    multipleChoiceQuestionChoiceId      String
    multipleChoiceQuestionChoice        MultipleChoiceQuestion @relation(fields: [multipleChoiceQuestionChoiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([multipleChoiceQuestionChoiceId])
}

model ShortAnswerQuestion {
    id                  String          @id @default(cuid())
    text                String          @db.Text
    images              Image[]
    answer              String
    explanation         String
    marks               Int    
    
    questionId         String?   @unique
    question           Question? @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([questionId])
}

model OpenEndedQuestion {
    id                  String      @id @default(cuid())
    text                String      @db.Text
    images              Image[]
    sampleAnswer        String      @db.MediumText
    explanation         String      @db.MediumText
    markingScheme       Json        @default("[]")  
    marks               Int
    questionId          String?     @unique
    question            Question?   @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([questionId])
}

// Grammar, focus, exposition, organization, plot, narrative_techniques, vocabulary and content 
// represent the marks given for each criteria.
// If the mark is 0, it means that the criteria is not considered when grading.
model EssayQuestion {
    id                  String      @id @default(cuid())
    text                String      @db.Text
    images              Image[]
    criteria            EssayQuestionCriteria[]
    essayType           String?
    questionId          String?     @unique
    question            Question?   @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([questionId])
}
model EssayQuestionCriteria {
    id                    String        @id @default(cuid())
    name                  String        @db.TinyText
    description           String?       @db.Text
    marks                 Int           @default(0)
    metadata              Json?                  
    essayQuestionId       String          
    essayQuestion         EssayQuestion    @relation(fields: [essayQuestionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([essayQuestionId])
}

// ***      Answers     ***

model Answer {
    id                              String    @id @default(cuid())
    order                           Int   
    answerType                      AnswerType
    nestedQuestionAnswer            NestedQuestionAnswer?           @relation(name: "NestedAnswer")
    multipleChoiceQuestionAnswer    MultipleChoiceQuestionAnswer?
    shortAnswerQuestionAnswer       ShortAnswerQuestionAnswer?
    openEndedQuestionAnswer         OpenEndedQuestionAnswer?
    essayAnswer                     EssayAnswer?
    answerSheetId                   String?
    answerSheet                     AnswerSheet?                  @relation(fields: [answerSheetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    parentId                        String?
    parent                          NestedQuestionAnswer?         @relation(name: "ParentAnswer", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@index([answerSheetId])
    @@index([parentId])
}

enum AnswerType {
    MultipleChoiceQuestionAnswer
    ShortAnswerQuestionAnswer
    OpenEndedQuestionAnswer
    NestedQuestionAnswer
    EssayAnswer
}

model NestedQuestionAnswer {
    id                    String    @id @default(cuid())
    // One-to-one relationship to question
    answerId              String    @unique
    answer                Answer    @relation(name: "NestedAnswer", fields: [answerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    // Many-to-one relationship to question
    childrenAnswers       Answer[]       @relation(name: "ParentAnswer")

    @@index([answerId])
}

model MultipleChoiceQuestionAnswer {
    id                    String    @id @default(cuid())
    studentAnswer         Int   
    feedback              String    @db.Text
    marks                 Int       @default(0)
    answerId              String    @unique
    answer                Answer    @relation(fields: [answerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([answerId])
}

model ShortAnswerQuestionAnswer {
    id                    String    @id @default(cuid())
    studentAnswer         String    @db.Text
    feedback              String    @db.Text
    marks                 Int       @default(0)
    answerId              String    @unique
    answer                Answer    @relation(fields: [answerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([answerId])
}

model OpenEndedQuestionAnswer {
    id                    String    @id @default(cuid())
    studentAnswer         String    @db.MediumText
    feedback              String    @db.Text
    marks                 Int       @default(0)
    answerId              String    @unique 
    answer                Answer    @relation(fields: [answerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([answerId])
}

model EssayAnswer {
    id                    String    @id @default(cuid())
    answerId              String    @unique 
    answer                Answer    @relation(fields: [answerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    studentAnswer         String    @db.MediumText
    
    // - Grammar 
    // - Focus 
    // - Exposition 
    // - Organization 
    // - Plot 
    // - Narrative Techniques 
    // - Language and Vocabulary 
    criteria              EssayAnswerCriteria[]
    properties            EssayAnswerProperty[]
    marks                 Int       @default(0)

    @@index([answerId])
}

model EssayAnswerCriteria {
    id                    String    @id @default(cuid())
    name                  String    @db.TinyText
    marks                 Int       @default(0)
    evaluation            String    @db.Text
    suggestion            String    @db.Text
    essayAnswerId         String    
    essayAnswer           EssayAnswer    @relation(fields: [essayAnswerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([essayAnswerId])
}

model EssayAnswerProperty {
    id                    String            @id @default(cuid())
    name                  String            @db.TinyText
    text                  String            @db.Text
    essayAnswerId         String    
    essayAnswer           EssayAnswer       @relation(fields: [essayAnswerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([essayAnswerId])
}